/*
 * This file is generated by jOOQ.
 */
package com.tiddar.nettylearn.stdchat.model.chat.tables;


import com.tiddar.nettylearn.stdchat.model.chat.Indexes;
import com.tiddar.nettylearn.stdchat.model.chat.Keys;
import com.tiddar.nettylearn.stdchat.model.chat.tables.records.ChatRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Chat extends TableImpl<ChatRecord> {

    private static final long serialVersionUID = 1974582043;

    /**
     * The reference instance of <code>chat.chat</code>
     */
    public static final Chat CHAT_ = new Chat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatRecord> getRecordType() {
        return ChatRecord.class;
    }

    /**
     * The column <code>chat.chat.id</code>.
     */
    public final TableField<ChatRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>chat.chat.name</code>.
     */
    public final TableField<ChatRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>chat.chat.password</code>.
     */
    public final TableField<ChatRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * Create a <code>chat.chat</code> table reference
     */
    public Chat() {
        this(DSL.name("chat"), null);
    }

    /**
     * Create an aliased <code>chat.chat</code> table reference
     */
    public Chat(String alias) {
        this(DSL.name(alias), CHAT_);
    }

    /**
     * Create an aliased <code>chat.chat</code> table reference
     */
    public Chat(Name alias) {
        this(alias, CHAT_);
    }

    private Chat(Name alias, Table<ChatRecord> aliased) {
        this(alias, aliased, null);
    }

    private Chat(Name alias, Table<ChatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Chat(Table<O> child, ForeignKey<O, ChatRecord> key) {
        super(child, key, CHAT_);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return com.tiddar.nettylearn.stdchat.model.chat.Chat.CHAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHAT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ChatRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CHAT_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ChatRecord> getPrimaryKey() {
        return Keys.KEY_CHAT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ChatRecord>> getKeys() {
        return Arrays.<UniqueKey<ChatRecord>>asList(Keys.KEY_CHAT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Chat as(String alias) {
        return new Chat(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Chat as(Name alias) {
        return new Chat(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chat rename(String name) {
        return new Chat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chat rename(Name name) {
        return new Chat(name, null);
    }
}
